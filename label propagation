import networkx as nx
from pyvis.network import Network
import community as community_louvain
import matplotlib.pyplot as plt

# خواندن فایل GML
G = nx.read_gml('twi-sharif.gml')

# محاسبه PageRank
pageranks = nx.pagerank(G)

# اجرای الگوریتم لووین
partition = community_louvain.best_partition(G)

# نگاشت گره به کامیونیتی آن و برعکس
community_to_nodes = {}
for node, community_id in partition.items():
    if community_id not in community_to_nodes:
        community_to_nodes[community_id] = []
    community_to_nodes[community_id].append(node)

# انتخاب نود شاخص برای هر کامیونیتی
central_nodes = {}
for com, nodes in community_to_nodes.items():
    central_node = max(nodes, key=lambda n: pageranks[n])
    central_nodes[com] = central_node

# ایجاد شبکه تعاملی با PyVis
net = Network(notebook=True, height="750px", width="100%", bgcolor="#222222", font_color="white")

# تنظیمات پیشرفته برای بهبود نمایش
net.barnes_hut(gravity=-80000, central_gravity=0.3, spring_length=100, spring_strength=0.01, damping=0.09, overlap=0)

# تنظیم رنگ برای هر کامیونیتی
community_colors = ["#"+''.join([hex(int(x*255))[2:].rjust(2,'0') for x in plt.cm.jet(i)[:3]]) for i in range(len(community_to_nodes))]

for node in G.nodes:
    is_central = node in central_nodes.values()
    title = str(node) if is_central else ""
    color = community_colors[partition[node]]
    size = pageranks[node] * 10000 + 10  # افزودن مقدار ثابت برای اطمینان از دیده شدن گره‌های کوچک
    net.add_node(node, title=title, size=size, color=color, label=title if is_central else None)

for edge in G.edges:
    net.add_edge(edge[0], edge[1], physics=True, smooth={'type': 'curvedCW', 'forceDirection': 'vertical', 'roundness': 0.2})

# تنظیمات بیشتر برای بهبود وضوح
net.set_options("""
var options = {
  "nodes": {
    "font": {
      "size": 12,
      "face": "Tahoma",
      "strokeWidth": 7,
      "strokeColor": "#ffffff"
    }
  },
  "edges": {
    "color": {
      "inherit": true
    },
    "smooth": {
      "type": "continuous"
    }
  },
  "physics": {
    "barnesHut": {
      "gravitationalConstant": -80000,
      "centralGravity": 0.3,
      "springLength": 100,
      "springConstant": 0.04,
      "damping": 0.09,
      "avoidOverlap": 0
    },
    "minVelocity": 0.75
  }
}
""")

# نمایش گراف
net.show("graph.html")
